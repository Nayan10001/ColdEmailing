import os
from datetime import datetime
import logging
from supabase import create_client, Client
from dotenv import load_dotenv
from typing import List, Dict

# Set up logging to get information about the manager's status
logger = logging.getLogger(__name__)

class SupabaseLeadManager:
    """Manages lead data using a Supabase database, including table creation."""
    
    def __init__(self):
        """Initializes the Supabase client by loading credentials from a .env file."""
        load_dotenv()
        url = os.environ.get("SUPABASE_URL")
        key = os.environ.get("SUPABASE_KEY")

        if not url or not key:
            raise ValueError("SUPABASE_URL and SUPABASE_KEY must be set in your .env file.")
            
        self.supabase: Client = create_client(url, key)
        logger.info("SupabaseLeadManager initialized successfully.")

    def create_leads_table(self) -> bool:
        """
        Creates the 'leads' table in the Supabase database with the correct schema.
        This method uses direct SQL execution through the Supabase REST API.
        """
        try:
            # Method 1: Try using the exec function (if it exists)
            sql_query = """
            CREATE TABLE IF NOT EXISTS public.leads (
                id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
                name TEXT,
                email TEXT NOT NULL UNIQUE,
                company TEXT,
                industry TEXT,
                status TEXT DEFAULT 'new',
                last_updated TIMESTAMPTZ,
                notes TEXT
            );
            """
            
            try:
                self.supabase.rpc('exec', {'sql': sql_query}).execute()
                logger.info("Successfully created or verified the 'leads' table schema in Supabase using exec function.")
                return True
            except Exception as exec_error:
                if "function exec" in str(exec_error).lower():
                    logger.info("exec function not found, trying alternative method...")
                    # Method 2: Use direct table creation via Supabase client
                    return self._create_table_alternative()
                else:
                    raise exec_error
                    
        except Exception as e:
            logger.error(f"Failed to create 'leads' table in Supabase: {e}")
            if "function exec(sql text) does not exist" in str(e).lower():
                logger.error(
                    "Hint: You need to create the 'exec' function in your Supabase SQL Editor.\n"
                    "Go to the SQL Editor in your Supabase dashboard and run the following one-time command:\n\n"
                    "CREATE OR REPLACE FUNCTION exec(sql TEXT) RETURNS TABLE(result TEXT) AS $$\n"
                    "BEGIN\n"
                    "    EXECUTE sql;\n"
                    "    RETURN;\n"
                    "END;\n"
                    "$$ LANGUAGE plpgsql;\n\n"
                    "Alternatively, you can create the table manually in the SQL Editor with:\n\n"
                    "CREATE TABLE IF NOT EXISTS public.leads (\n"
                    "    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,\n"
                    "    created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,\n"
                    "    name TEXT,\n"
                    "    email TEXT NOT NULL UNIQUE,\n"
                    "    company TEXT,\n"
                    "    industry TEXT,\n"
                    "    status TEXT DEFAULT 'new',\n"
                    "    last_updated TIMESTAMPTZ,\n"
                    "    notes TEXT\n"
                    ");"
                )
            return False

    def _create_table_alternative(self) -> bool:
        """
        Alternative method to create the table by checking if it exists first.
        This method attempts to query the table and creates it manually if it doesn't exist.
        """
        try:
            # Check if table exists by trying to query it
            self.supabase.table('leads').select('id').limit(1).execute()
            logger.info("Table 'leads' already exists.")
            return True
        except Exception as e:
            if "relation \"public.leads\" does not exist" in str(e):
                logger.info("Table 'leads' does not exist. Please create it manually in your Supabase SQL Editor.")
                logger.info(
                    "Go to your Supabase dashboard > SQL Editor and run:\n\n"
                    "CREATE TABLE IF NOT EXISTS public.leads (\n"
                    "    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,\n"
                    "    created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,\n"
                    "    name TEXT,\n"
                    "    email TEXT NOT NULL UNIQUE,\n"
                    "    company TEXT,\n"
                    "    industry TEXT,\n"
                    "    status TEXT DEFAULT 'new',\n"
                    "    last_updated TIMESTAMPTZ,\n"
                    "    notes TEXT\n"
                    ");"
                )
                return False
            else:
                logger.error(f"Unexpected error checking table existence: {e}")
                return False

    def get_leads_by_status(self, status: str) -> List[Dict]:
        """Get leads from Supabase filtered by status."""
        try:
            response = self.supabase.table('leads').select('*').eq('status', status).execute()
            logger.info(f"Found {len(response.data)} leads with status '{status}'.")
            return response.data
        except Exception as e:
            logger.error(f"Failed to get leads from Supabase: {e}")
            return []

    def update_lead_status(self, email: str, new_status: str, notes: str = None) -> bool:
        """Update a lead's status in Supabase by their email."""
        try:
            update_data = {
                'status': new_status,
                'last_updated': datetime.now().isoformat()
            }
            if notes:
                update_data['notes'] = notes
            
            response = self.supabase.table('leads').update(update_data).eq('email', email).execute()
            
            if len(response.data) > 0:
                logger.info(f"Updated lead {email} status to {new_status}")
                return True
            else:
                logger.warning(f"No lead found with email {email} to update.")
                return False
        except Exception as e:
            logger.error(f"Failed to update lead {email}: {e}")
            return False

    def add_lead(self, lead_data: Dict) -> bool:
        """Add a single lead to the Supabase database."""
        try:
            # Ensure required fields are present for a valid lead
            required_fields = ['name', 'email']
            if not all(field in lead_data for field in required_fields):
                raise ValueError(f"Lead must contain at least: {required_fields}")

            response = self.supabase.table('leads').insert(lead_data).execute()
            
            if len(response.data) > 0:
                logger.info(f"Added lead to Supabase: {lead_data['email']}")
                return True
            return False
        except Exception as e:
            # Handle potential duplicate email error gracefully
            if 'duplicate key value violates unique constraint' in str(e):
                logger.warning(f"Lead with email {lead_data['email']} already exists. Skipping.")
            else:
                logger.error(f"Failed to add lead {lead_data['email']}: {e}")
            return False
            
    def does_table_have_leads(self) -> bool:
        """Check if the leads table has any entries at all."""
        try:
            # A lightweight query to check for existence without fetching all data
            response = self.supabase.table('leads').select('id', count='exact').limit(1).execute()
            return response.count > 0
        except Exception as e:
            logger.error(f"Failed to check for leads in Supabase: {e}")
            return False